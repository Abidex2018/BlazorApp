@page  "/login"
@using BlazorApp.Data
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage


<center>
    <div class="col-8 card">
        <div class="col-12 row">
            <p>&nbsp;</p>
        </div>
        <div class="col-12 row">
            <div class="col-6" style="border-right:groove">
                <img src="/img/book_store_logo.jpg" width="400px" height="400px" />
            </div>
            <div class="col-6" style="border-left:groove">
                <EditForm Model="@user" OnValidSubmit="@ValidateUser">
                    <div>
                        <br /><br /><br /><br /><br />
                    </div>
                    <div>
                        <h3 style="font-weight:bold; color:purple">Book Stores Login</h3>
                    </div>
                    <div>
                        <br />
                    </div>
                    <div class="col-12 row">
                        <input class="form-control col-12" @bind="user.EmailAddress" placeholder="email address" />
                    </div>
                    <br />
                    <div class="col-12 row">
                        <input type="password" class="form-control col-12" @bind="user.Password" placeholder="password" />
                    </div>
                    <br />
                    <div class="col-12 row">
                        <span class="col-12"></span>
                        <input type="submit" class="form-control col-12 btn btn-primary" value="Login" />
                    </div>

                </EditForm>
            </div>
        </div>
        <div class="col-12 row">
            <p>&nbsp;</p>
        </div>
    </div>
</center>

@code {

    private User user;

    protected override Task OnInitializedAsync()
    {
        user = new User();
        return base.OnInitializedAsync();
    }

    private async Task<bool> ValidateUser()
    {
        //assume that user is valid
        //call an API

        ((CustomAuthenticationStateProvider)AuthenticationStateProvider).MarkUserAsAuthenticated(user.EmailAddress);
        NavigationManager.NavigateTo("/");

        await sessionStorage.SetItemAsync("emailAddress", user.EmailAddress);

        return await Task.FromResult(true);
    }

}
